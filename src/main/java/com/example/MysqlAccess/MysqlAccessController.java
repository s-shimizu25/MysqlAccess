package com.example.MysqlAccess;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class MysqlAccessController {
	@Autowired	// This means to get the bean called CustomerRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private CustomerRepository customerRepository;
	
	@Autowired
	private DepartmentRepository departmentRepository;
	
	@Autowired
	private EmployeeRepository employeeRepository;
	
	
	

	/*pathが呼び出されたときに行う処理*/
	
	//"/"の時index.htmlを表示
	@RequestMapping(path="/")
    public String index() {
		// DBアクセスTop画面を表示
        return "index";
    }
	
	
	@GetMapping(path="/all")
	public String list(Model model) {
		// M_CUSTOMERテーブルの全データを取得
		Iterable<Customer> customerList = customerRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("customerlist",customerList);

		// データ一覧画面(html)を表示
		return "list";
	}
	
	@GetMapping(path="/d_all")
	public String d_list(Model model) {
		// M_DEPARTMENTテーブルの全データを取得
		Iterable<Department> departmentList = departmentRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("departmentlist",departmentList);

		// データ一覧画面(html)を表示
		return "d_list";
	}
	
	
	@GetMapping(path="/e_all")
	public String e_list(Model model) {
		// M_EMPLOYEEテーブルの全データを取得
		Iterable<Employee> employeeList = employeeRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("employeelist",employeeList);

		// データ一覧画面(html)を表示
		return "e_list";
	}
	
	
	
	//顧客名簿
	@RequestMapping("/insert")
    public String insert() {
		// データ登録画面(html)を表示
        return "insert";
    }
	
	//部署名簿
	@RequestMapping("/d_insert")
    public String d_insert() {
		// データ登録画面(html)を表示
        return "d_insert";
    }
	
	//従業員名簿
	@RequestMapping("/e_insert")
    public String e_insert() {
		// データ登録画面(html)を表示
        return "e_insert";
    }
	
	

	

	
	/*DB登録処理*/
	
	//顧客名簿の登録
	@PostMapping(path="/register")
	public @ResponseBody String addNewCustomer(	  @RequestParam String c_num 
												, @RequestParam String c_name
												, @RequestParam String address
												, @RequestParam String tel ) { 
		//customerAddDataに代入
		Customer customerAddData = new Customer();			//customerAddDataオブジェクトの生成
		customerAddData.setAll(c_num,c_name,address,tel);	//引数の代入
		
		//作成日時、作成者、更新日時、更新者の代入
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		customerAddData.setCreate_date(timestamp);
		customerAddData.setCreate_user("auto_system");
		customerAddData.setUpdate_date(timestamp);
		customerAddData.setUpdate_user("auto_system");
		
		customerRepository.save(customerAddData);
		
		return "登録しました";
	}
	
	//部署名簿の登録
	@PostMapping(path="/d_register")
	public @ResponseBody String addNewDepartment(	  @RequestParam String d_cd
													, @RequestParam String d_name) {
				
		Department departmentAddData = new Department();	//departmentAddDataオブジェクトの生成
		departmentAddData.setAll(d_cd,d_name);				//引数の代入
					
		//作成日時、作成者、更新日時、更新者の代入
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		departmentAddData.setCreate_date(timestamp);
		departmentAddData.setCreate_user("auto_system");
		departmentAddData.setUpdate_date(timestamp);
		departmentAddData.setUpdate_user("auto_system");
					
		departmentRepository.save(departmentAddData);
					
		return "登録しました";
		}
	
	//従業員名簿の登録
	@PostMapping(path="/e_register")
	public @ResponseBody String addNewEmployee(	  @RequestParam String e_num 
												, @RequestParam String e_name
												, @RequestParam int e_year
												, @RequestParam String depart_cd) {
				
		Employee employeeAddData = new Employee();				//employeeAddDataオブジェクトの生成
		employeeAddData.setAll(e_num,e_name,e_year,depart_cd);	//引数の代入
					
		//作成日時、作成者、更新日時、更新者の代入
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		employeeAddData.setCreate_date(timestamp);
		employeeAddData.setCreate_user("auto_system");
		employeeAddData.setUpdate_date(timestamp);
		employeeAddData.setUpdate_user("auto_system");
					
		employeeRepository.save(employeeAddData);
						
		return "登録しました";
			
		}

}
